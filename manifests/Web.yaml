kind: Deployment
apiVersion: apps/v1
metadata:
  name: web
  namespace: swytch-peers
  labels:
    app.kubernetes.io/name: swytch-peers
    app.kubernetes.io/instance: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: swytch-peers
      app.kubernetes.io/instance: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: swytch-peers
        app.kubernetes.io/instance: web
    spec:
      containers:
        - name: webserver
          image: registry.bottled.codes/peers/webserver
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          env:
            - name: SERVER_NAME
              value: ":80"
          envFrom:
            - secretRef:
                name: peer-secrets
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: swytch-peers
                    app.kubernetes.io/instance: web
              weight: 100
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
---
kind: Service
apiVersion: v1
metadata:
  name: peers-web
  namespace: swytch-peers
  labels:
    app.kubernetes.io/name: swytch-peers
    app.kubernetes.io/instance: web
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: swytch-peers
    app.kubernetes.io/instance: web
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: peers-web
  namespace: swytch-peers
  labels:
    app.kubernetes.io/name: swytch-peers
    app.kubernetes.io/instance: web
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/issue-temporary-certificate: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - peers.bottled.codes
      secretName: peers-web-tls
  rules:
    - host: peers.bottled.codes
      http:
        paths:
          - backend:
              service:
                name: peers-web
                port:
                  number: 80
            pathType: Prefix
            path: /

<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'Bottledcode\\DurablePhp\\Config\\RethinkDbConfig' => 'get1',
  'Bottledcode\\DurablePhp\\Config\\Config' => 'get2',
  'Bottledcode\\DurablePhp\\Abstractions\\Sources\\Source' => 'get3',
  'Bottledcode\\SwytchFramework\\Template\\Interfaces\\AuthenticationServiceInterface' => 'get4',
  'subEntry1' => 'get5',
  'subEntry2' => 'get6',
  'Bottledcode\\DurablePhp\\DurableClientInterface' => 'get7',
  'subEntry3' => 'get8',
  'subEntry4' => 'get9',
  'Bottledcode\\DurablePhp\\EntityClientInterface' => 'get10',
  'subEntry5' => 'get11',
  'subEntry6' => 'get12',
  'Bottledcode\\DurablePhp\\OrchestrationClientInterface' => 'get13',
  'subEntry7' => 'get14',
  'subEntry8' => 'get15',
  'Peers\\Model\\Interfaces\\User' => 'get16',
  'Psr\\Log\\LoggerInterface' => 'get17',
  'env.SWYTCH_LANGUAGE_DIR' => 'get18',
  'Peers\\ReCache' => 'get19',
  'subEntry9' => 'get20',
);

    protected function get1()
    {
        return $this->resolveFactory(static fn() => new \Bottledcode\DurablePhp\Config\RethinkDbConfig(
            host: getenv('RETHINKDB_HOST') ?: 'localhost',
            username: getenv('RETHINKDB_USER') ?: 'admin',
            password: getenv('RETHINKDB_PASSWORD') ?: '',
            database: getenv('RETHINKDB_DATABASE') ?: 'peers',
        ), 'Bottledcode\\DurablePhp\\Config\\RethinkDbConfig');
    }

    protected function get2()
    {
        return $this->resolveFactory(static fn(\Bottledcode\DurablePhp\Config\RethinkDbConfig $config) => new \Bottledcode\DurablePhp\Config\Config(
            currentPartition: (int)\array_slice(\explode('-', \gethostname()), -1)[0],
            storageConfig: $config,
            totalPartitions: (int)\getenv('TOTAL_PARTITIONS') ?: 3,
            totalWorkers: (int)\getenv('TOTAL_WORKERS') ?: 32,
            bootstrapPath: __DIR__ . '/../src/Bootstrap.php',
            maximumMemoryPerWorker: 128,
            factory: 'make'
        ), 'Bottledcode\\DurablePhp\\Config\\Config');
    }

    protected function get3()
    {
        return $this->resolveFactory(static fn(\Bottledcode\DurablePhp\Config\Config $config) => \Bottledcode\DurablePhp\Abstractions\Sources\SourceFactory::fromConfig($config), 'Bottledcode\\DurablePhp\\Abstractions\\Sources\\Source');
    }

    protected function get5()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\DurableClientInterface');
    }

    protected function get6()
    {
        return $this->delegateContainer->get('Peers\\ReCache');
    }

    protected function get4()
    {
        $object = new Peers\Authentication($this->get5(), $this->get6());
        return $object;
    }

    protected function get8()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\EntityClientInterface');
    }

    protected function get9()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\OrchestrationClientInterface');
    }

    protected function get7()
    {
        $object = new Bottledcode\DurablePhp\DurableClient($this->get8(), $this->get9());
        return $object;
    }

    protected function get11()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\Config\\Config');
    }

    protected function get12()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\Abstractions\\Sources\\Source');
    }

    protected function get10()
    {
        $object = new Bottledcode\DurablePhp\EntityClient($this->get11(), $this->get12());
        return $object;
    }

    protected function get14()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\Config\\Config');
    }

    protected function get15()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\Abstractions\\Sources\\Source');
    }

    protected function get13()
    {
        $object = new Bottledcode\DurablePhp\OrchestrationClient($this->get14(), $this->get15());
        return $object;
    }

    protected function get16()
    {
        $object = new Peers\Model\Entities\User([
        ], [
        ], '', '', '');
        return $object;
    }

    protected function get17()
    {
        return $this->resolveFactory(static function () {
            $logger = new \Monolog\Logger('peers');
            $logger->pushHandler(new \Monolog\Handler\StreamHandler('php://stdout', \Monolog\Level::Debug));
            return $logger;
        }, 'Psr\\Log\\LoggerInterface');
    }

    protected function get18()
    {
        return '/app/src/../languages';
    }

    protected function get20()
    {
        return $this->delegateContainer->get('Bottledcode\\DurablePhp\\Abstractions\\Sources\\Source');
    }

    protected function get19()
    {
        $object = new Peers\ReCache($this->get20());
        return $object;
    }

}
